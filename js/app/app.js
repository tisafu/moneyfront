// Generated by CoffeeScript 1.3.3
(function() {
  var Item, ItemView, Items,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Item = (function(_super) {

    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.defaults = function() {
      return {
        content: "content",
        year: (new Date()).getFullYear(),
        month: (new Date()).getMonth() + 1,
        date: (new Date()).getDate(),
        amount: 0.0,
        tags: [],
        create_time: $.now()
      };
    };

    Item.prototype.initialize = function() {
      if (!this.content) {
        this.content = this.defaults.content;
      }
      if (!create_time) {
        return this.create_time = this.defaults.create_time;
      }
    };

    Item.prototype.clear = function() {
      return this.destroy();
    };

    return Item;

  })(Backbone.Model);

  Items = (function(_super) {

    __extends(Items, _super);

    function Items() {
      return Items.__super__.constructor.apply(this, arguments);
    }

    Items.prototype.model = Item;

    Items.prototype.localStorage = new Store("items-backstore");

    return Items;

  })(Backbone.Collection);

  ItemView = (function(_super) {

    __extends(ItemView, _super);

    function ItemView() {
      return ItemView.__super__.constructor.apply(this, arguments);
    }

    ItemView.prototype.tagName = "li";

    ItemView.prototype.className = "item";

    ItemView.prototype.initialize = function() {
      this.model.bind('change', this.render, this);
      return this.model.bind('destroy', this.remove, this);
    };

    ItemView.prototype.render = function() {
      return this.model.toJSON();
    };

    ItemView.prototype.clear = function() {
      return this.model.clear();
    };

    return ItemView;

  })(Backbone.View);

}).call(this);
