// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var HomeView, Item, ItemView, Items, app;
    Item = (function(_super) {

      __extends(Item, _super);

      function Item() {
        return Item.__super__.constructor.apply(this, arguments);
      }

      Item.prototype.defaults = {
        content: "content",
        year: (new Date()).getFullYear(),
        month: (new Date()).getMonth() + 1,
        date: (new Date()).getDate(),
        amount: 0.0,
        tags: [],
        create_time: $.now()
      };

      return Item;

    })(Backbone.Model);
    Items = (function(_super) {

      __extends(Items, _super);

      function Items() {
        return Items.__super__.constructor.apply(this, arguments);
      }

      Items.prototype.model = Item;

      Items.prototype.localStorage = new Backbone.LocalStorage("items-backstore");

      return Items;

    })(Backbone.Collection);
    ItemView = (function(_super) {

      __extends(ItemView, _super);

      function ItemView() {
        return ItemView.__super__.constructor.apply(this, arguments);
      }

      ItemView.prototype.tagName = "div";

      ItemView.prototype.className = "item";

      ItemView.prototype.template = _.template('<span class="content inline"><%= content %></span>' + '<span class="amount inline"><%= amount %></span>' + '<span class="date inline"><%= year %>-<%= month %>-<%= date %></span>' + '<button class="remove">删除</button>');

      ItemView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind('change', this.render, this);
        return this.model.bind('destroy', this.unrender, this);
      };

      ItemView.prototype.render = function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      };

      ItemView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      ItemView.prototype["delete"] = function() {
        return this.model.destroy();
      };

      ItemView.prototype.events = {
        'click button.remove': 'delete'
      };

      return ItemView;

    })(Backbone.View);
    HomeView = (function(_super) {

      __extends(HomeView, _super);

      function HomeView() {
        return HomeView.__super__.constructor.apply(this, arguments);
      }

      HomeView.prototype.el = $('#main');

      HomeView.prototype.initialize = function() {
        _.bindAll(this);
        this.items = new Items;
        this.items.bind('add', this.onAdd, this);
        this.items.bind('all', this.render, this);
        this.items.bind('fetch', this.onFetch, this);
        return this.items.fetch({
          add: true
        });
      };

      HomeView.prototype.onFetch = function() {
        return this.items.each(this.onAdd);
      };

      HomeView.prototype.render = function() {
        $('#stats').empty().append(this.items.length);
        return this;
      };

      HomeView.prototype.onAdd = function(item) {
        var view;
        view = new ItemView({
          model: item
        });
        return $('#items').append(view.render().el);
      };

      HomeView.prototype.createItem = function() {
        if (!$('input').val()) {
          return;
        }
        this.items.create({
          content: $('input').val()
        });
        return $('input').val('');
      };

      HomeView.prototype.events = {
        'click button': 'createItem'
      };

      return HomeView;

    })(Backbone.View);
    return app = new HomeView;
  });

}).call(this);
