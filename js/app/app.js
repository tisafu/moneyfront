// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var InputView, Item, ItemView, Items, ItemsView, StatsView, inputView, items, itemsView, statsView;
    Item = (function(_super) {

      __extends(Item, _super);

      function Item() {
        return Item.__super__.constructor.apply(this, arguments);
      }

      Item.prototype.defaults = {
        content: "content",
        year: (new Date()).getFullYear(),
        month: (new Date()).getMonth() + 1,
        date: (new Date()).getDate(),
        amount: 0.0,
        tags: [],
        create_time: $.now()
      };

      return Item;

    })(Backbone.Model);
    Items = (function(_super) {

      __extends(Items, _super);

      function Items() {
        return Items.__super__.constructor.apply(this, arguments);
      }

      Items.prototype.model = Item;

      Items.prototype.localStorage = new Backbone.LocalStorage("items-backstore");

      return Items;

    })(Backbone.Collection);
    items = new Items;
    ItemView = (function(_super) {

      __extends(ItemView, _super);

      function ItemView() {
        return ItemView.__super__.constructor.apply(this, arguments);
      }

      ItemView.prototype.tagName = "li";

      ItemView.prototype.className = "item list_view";

      ItemView.prototype.template = _.template('<div class="content"><%= content %></div>\n<div class="amount"><%= amount %></div>\n<div class="date"><%= year %>-<%= month %>-<%= date %></div>\n<div class="actions">\n    <a href="#" class="remove">\n        <img src="images/destroy.png" alt="remove" title="remove" />\n    </a>\n</div>');

      ItemView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind('change', this.render, this);
        return this.model.bind('destroy', this.unrender, this);
      };

      ItemView.prototype.render = function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      };

      ItemView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      ItemView.prototype["delete"] = function() {
        return this.model.destroy();
      };

      ItemView.prototype.events = {
        'click .remove': 'delete'
      };

      return ItemView;

    })(Backbone.View);
    InputView = (function(_super) {

      __extends(InputView, _super);

      function InputView() {
        return InputView.__super__.constructor.apply(this, arguments);
      }

      InputView.prototype.el = $('#input_view');

      InputView.prototype.content = $('input#content');

      InputView.prototype.amount = $('input#amount');

      InputView.prototype.initialize = function() {
        return _.bindAll(this);
      };

      InputView.prototype.render = function() {
        return this;
      };

      InputView.prototype.submit_create = function(e) {
        e.preventDefault();
        if (this.content.val() && this.amount.val()) {
          items.create({
            content: this.content.val(),
            amount: this.amount.val()
          });
          this.content.val('');
          this.amount.val('');
        }
        return false;
      };

      InputView.prototype.events = {
        'submit #input_form': 'submit_create'
      };

      return InputView;

    })(Backbone.View);
    inputView = new InputView;
    StatsView = (function(_super) {

      __extends(StatsView, _super);

      function StatsView() {
        return StatsView.__super__.constructor.apply(this, arguments);
      }

      StatsView.prototype.el = $('#stats_view');

      StatsView.prototype.count = $('#count');

      StatsView.prototype.avg = $('#avg');

      StatsView.prototype.sum = $('#sum');

      StatsView.prototype.initialize = function() {
        _.bindAll(this);
        return items.bind('all', this.render, this);
      };

      StatsView.prototype.render = function() {
        this.count.html(items.length);
        this.avg.html(items.length);
        return this.sum.html(items.length);
      };

      return StatsView;

    })(Backbone.View);
    statsView = new StatsView;
    ItemsView = (function(_super) {

      __extends(ItemsView, _super);

      function ItemsView() {
        return ItemsView.__super__.constructor.apply(this, arguments);
      }

      ItemsView.prototype.el = $('#items_view');

      ItemsView.prototype.initialize = function() {
        _.bindAll(this);
        items.bind('add', this.onAdd, this);
        items.bind('fetch', this.onFetch, this);
        return items.fetch({
          add: true
        });
      };

      ItemsView.prototype.onFetch = function() {
        return items.each(this.onAdd);
      };

      ItemsView.prototype.render = function() {
        return this;
      };

      ItemsView.prototype.onAdd = function(item) {
        var view;
        view = new ItemView({
          model: item
        });
        return $('#item_list').append(view.render().el).fadeIn();
      };

      return ItemsView;

    })(Backbone.View);
    return itemsView = new ItemsView;
  });

}).call(this);
